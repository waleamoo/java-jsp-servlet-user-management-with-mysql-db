CREATE DATABASE spring_us_mng;

USE spring_us_mng;

CREATE TABLE users(  
	id int(11) AUTO_INCREMENT PRIMARY KEY, 
   	username varchar(50),
   	email varchar(50),
   	fullname varchar(100),
   	password varchar(150),
    phone varchar(15)
); 


CREATE TABLE students(
	id int(11) AUTO_INCREMENT PRIMARY KEY,
   	student_country varchar(50),
   	student_email varchar(100),
   	student_name varchar(100),
   	user_id int(11) DEFAULT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id)

); 


<link rel="stylesheet" type="text/css" href="<c:url value="/resources/css/bootstrap.min.css" />">
  <link rel="stylesheet" type="text/css" href="<c:url value="/resources/css/font-awesome.min.css" />">
  <link rel="stylesheet" type="text/css" href="<c:url value="/resources/css/shop-homepage.css" />">


   <script type="text/javascript" src="<c:url value="/resources/js/jquery.min.js"/>"></script>
  <script type="text/javascript" src="<c:url value="/resources/js/bootstrap.bundle.min.js"/>"></script>
  <script type="text/javascript" src="<c:url value="/resources/js/chart.min.js"/>"></script>



<link rel="stylesheet" type="text/css" href="./resources/css/bootstrap.min.css">
  <link rel="stylesheet" type="text/css" href="./resources/css/font-awesome.min.css">
  <link rel="stylesheet" type="text/css" href="./resources/css/shop-homepage.css">


package com.techqwerty.util;

import java.security.spec.KeySpec;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import org.apache.commons.codec.binary.Base64;

public class MyEncryptor {

    private static final String UNICODE_FORMAT = "UTF8";
    public static final String DESEDE_ENCRYPTION_SCHEME = "DESede";
    private KeySpec ks;
    private SecretKeyFactory skf;
    private Cipher cipher;
    byte[] arrayBytes;
    private String myEncryptionKey;
    private String myEncryptionScheme;
    SecretKey key;

    public MyEncryptor() {
        myEncryptionKey = "ThisIsSpartaThisIsSparta";
        myEncryptionScheme = DESEDE_ENCRYPTION_SCHEME;
        arrayBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);
        ks = new DESedeKeySpec(arrayBytes);
        skf = SecretKeyFactory.getInstance(myEncryptionScheme);
        cipher = Cipher.getInstance(myEncryptionScheme);
        key = skf.generateSecret(ks);
    }

    public String encrypt(String unencryptedString) {
        String encryptedString = null;
        try {
            cipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);
            byte[] encryptedText = cipher.doFinal(plainText);
            encryptedString = new String(Base64.encodeBase64(encryptedText));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return encryptedString;
    }


    public String decrypt(String encryptedString) {
        String decryptedText=null;
        try {
            cipher.init(Cipher.DECRYPT_MODE, key);
            byte[] encryptedText = Base64.decodeBase64(encryptedString);
            byte[] plainText = cipher.doFinal(encryptedText);
            decryptedText= new String(plainText);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return decryptedText;
    }

}
